# ==================================================================
# QUANTUM'S NGINX INGRESS CONTROLLER CONFIGURATION
# High-performance, secure ingress with advanced features
# ==================================================================

# Controller configuration
controller:
  # Replica configuration
  replicaCount: 3
  
  # Minimum available replicas during updates
  minAvailable: 2
  
  # Image configuration
  image:
    repository: k8s.gcr.io/ingress-nginx/controller
    tag: "v1.8.1"
    pullPolicy: IfNotPresent
    runAsUser: 101
    allowPrivilegeEscalation: true
  
  # Container configuration
  containerName: controller
  containerPort:
    http: 80
    https: 443
  
  # Configuration
  config:
    # Performance tuning
    worker-processes: "auto"
    worker-connections: "16384"
    max-worker-open-files: "65536"
    worker-rlimit-nofile: "65536"
    
    # Buffer sizes
    proxy-buffer-size: "16k"
    proxy-buffers-number: "8"
    client-body-buffer-size: "16K"
    client-header-buffer-size: "1k"
    large-client-header-buffers: "4 16k"
    
    # Timeouts
    proxy-connect-timeout: "60"
    proxy-send-timeout: "60"
    proxy-read-timeout: "60"
    client-body-timeout: "60"
    client-header-timeout: "60"
    keep-alive-requests: "10000"
    upstream-keepalive-connections: "320"
    upstream-keepalive-timeout: "60"
    upstream-keepalive-requests: "10000"
    
    # Security headers
    add-headers: "astral-turf/security-headers"
    
    # Rate limiting
    rate-limit: "100"
    rate-limit-window: "1m"
    
    # Compression
    enable-brotli: "true"
    brotli-level: "6"
    brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"
    
    # Real IP
    use-forwarded-headers: "true"
    compute-full-forwarded-for: "true"
    use-proxy-protocol: "false"
    
    # SSL
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
    ssl-prefer-server-ciphers: "false"
    ssl-session-cache: "true"
    ssl-session-cache-size: "10m"
    ssl-session-timeout: "10m"
    ssl-session-tickets: "false"
    
    # Error pages
    custom-http-errors: "403,404,500,502,503,504"
    
    # Logging
    log-format-escape-json: "true"
    log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forward_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "upstream_addr": "$upstream_addr", "upstream_response_time": "$upstream_response_time", "upstream_response_length": "$upstream_response_length", "upstream_status": "$upstream_status"}'
    
    # Monitoring
    enable-opentelemetry: "true"
    opentelemetry-config: "/etc/nginx/opentelemetry.toml"
    
    # Security
    hide-headers: "Server,X-Powered-By"
    server-tokens: "false"
    
    # Additional config
    client-max-body-size: "50m"
    proxy-body-size: "50m"
    
  # Resources
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Service configuration
  service:
    enabled: true
    type: LoadBalancer
    
    # AWS Load Balancer annotations
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
      service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    
    # Port configuration
    ports:
      http: 80
      https: 443
    
    targetPorts:
      http: http
      https: https
    
    # Health check
    healthCheckNodePort: 0
  
  # Metrics
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
    serviceMonitor:
      enabled: true
      namespace: monitoring
      additionalLabels:
        release: prometheus
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true
      image:
        repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
        tag: v1.3.0
    
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  # Node selection
  nodeSelector:
    kubernetes.io/os: linux
  
  # Tolerations
  tolerations:
  - key: node-role.kubernetes.io/master
    operator: Equal
    effect: NoSchedule
  
  # Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - ingress-nginx
          topologyKey: kubernetes.io/hostname
  
  # Lifecycle
  lifecycle:
    preStop:
      exec:
        command:
        - /wait-shutdown
  
  # Priority class
  priorityClassName: system-cluster-critical

# Default backend
defaultBackend:
  enabled: true
  
  image:
    repository: k8s.gcr.io/defaultbackend-amd64
    tag: "1.5"
  
  replicaCount: 2
  
  resources:
    requests:
      cpu: 10m
      memory: 20Mi
    limits:
      cpu: 20m
      memory: 40Mi
  
  # Custom error pages
  extraVolumes:
  - name: custom-error-pages
    configMap:
      name: nginx-custom-errors
  
  extraVolumeMounts:
  - name: custom-error-pages
    mountPath: /www

# RBAC
rbac:
  create: true
  scope: false

# Service account
serviceAccount:
  create: true
  name: nginx-ingress-controller
  automountServiceAccountToken: true

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101
  runAsGroup: 82
  fsGroup: 82

# Security context
securityContext:
  capabilities:
    drop:
    - ALL
    add:
    - NET_BIND_SERVICE
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 101
  allowPrivilegeEscalation: true

---
# Custom error pages ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-custom-errors
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: error-pages
data:
  "404.html": |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Page Not Found</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #2dd4bf; }
        </style>
    </head>
    <body>
        <h1>404 - Page Not Found</h1>
        <p>The page you're looking for doesn't exist.</p>
        <a href="/">Return to Astral Turf</a>
    </body>
    </html>
  
  "500.html": |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Server Error</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #ef4444; }
        </style>
    </head>
    <body>
        <h1>500 - Server Error</h1>
        <p>Something went wrong on our end. Please try again later.</p>
        <a href="/">Return to Astral Turf</a>
    </body>
    </html>

---
# Security headers ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-headers
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: astral-turf
    app.kubernetes.io/component: security
data:
  X-Content-Type-Options: "nosniff"
  X-Frame-Options: "DENY"
  X-XSS-Protection: "1; mode=block"
  Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
  Referrer-Policy: "strict-origin-when-cross-origin"
  Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.tailwindcss.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.tailwindcss.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.astral-turf.com wss://api.astral-turf.com"