# ==================================================================
# QUANTUM'S CHAOS ENGINEERING & RELIABILITY TESTING
# Proactive resilience testing for 99.99% uptime guarantee
# ==================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: chaos-engineering
  labels:
    name: chaos-engineering
    security.astral-turf.com/zone: testing

---
# ==================================================================
# LITMUS CHAOS OPERATOR
# ==================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-operator-ce
  namespace: chaos-engineering
  labels:
    app.kubernetes.io/name: chaos-operator
    app.kubernetes.io/component: operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: chaos-operator
  template:
    metadata:
      labels:
        name: chaos-operator
        app.kubernetes.io/name: chaos-operator
        app.kubernetes.io/component: operator
    spec:
      serviceAccountName: litmus
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
      containers:
        - name: chaos-operator
          image: litmuschaos/chaos-operator:3.0.0
          imagePullPolicy: Always
          env:
            - name: CHAOS_RUNNER_IMAGE
              value: litmuschaos/chaos-runner:3.0.0
            - name: WATCH_NAMESPACE
              value: ''
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: chaos-operator
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 125m
              memory: 300Mi
            limits:
              cpu: 500m
              memory: 500Mi

---
# ==================================================================
# CHAOS EXPERIMENTS FOR ASTRAL TURF
# ==================================================================

apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: astral-turf-pod-failure-chaos
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: chaos-engine
    experiment: pod-failure
spec:
  engineState: 'active'
  auxiliaryAppInfo: ''
  chaosServiceAccount: litmus
  experiments:
    - name: pod-delete
      spec:
        components:
          env:
            - name: TOTAL_CHAOS_DURATION
              value: '60'
            - name: CHAOS_INTERVAL
              value: '10'
            - name: FORCE
              value: 'false'
            - name: PODS_AFFECTED_PERC
              value: '20'
            - name: TARGET_CONTAINER
              value: 'astral-turf'
            - name: NODE_LABEL
              value: ''
          probe:
            - name: 'availability-check'
              type: 'httpProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 10
                retry: 3
                interval: 5
                probePollingInterval: 2
              httpProbe/inputs:
                url: 'http://astral-turf-service:3000/health'
                insecureSkipTLS: false
                method:
                  get:
                    criteria: ==
                    responseCode: '200'
            - name: 'tactical-board-functionality'
              type: 'httpProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 15
                retry: 2
                interval: 10
                probePollingInterval: 5
              httpProbe/inputs:
                url: 'http://astral-turf-service:3000/api/tactical-boards/test'
                insecureSkipTLS: false
                method:
                  get:
                    criteria: ==
                    responseCode: '200'
  annotationCheck: 'false'
  appinfo:
    appns: 'astral-turf'
    applabel: 'app.kubernetes.io/name=astral-turf'
    appkind: 'deployment'

---
apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: astral-turf-network-chaos
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: chaos-engine
    experiment: network-chaos
spec:
  engineState: 'active'
  auxiliaryAppInfo: ''
  chaosServiceAccount: litmus
  experiments:
    - name: pod-network-latency
      spec:
        components:
          env:
            - name: TOTAL_CHAOS_DURATION
              value: '120'
            - name: NETWORK_LATENCY
              value: '2000'
            - name: JITTER
              value: '0'
            - name: TARGET_CONTAINER
              value: 'astral-turf'
            - name: PODS_AFFECTED_PERC
              value: '30'
            - name: DESTINATION_IPS
              value: ''
            - name: DESTINATION_HOSTS
              value: ''
            - name: CONTAINER_RUNTIME
              value: 'containerd'
            - name: SOCKET_PATH
              value: '/run/containerd/containerd.sock'
          probe:
            - name: 'response-time-check'
              type: 'httpProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 10
                retry: 3
                interval: 5
                probePollingInterval: 2
              httpProbe/inputs:
                url: 'http://astral-turf-service:3000/api/health'
                insecureSkipTLS: false
                method:
                  get:
                    criteria: <=
                    responseCode: '500'
            - name: 'websocket-connection-check'
              type: 'cmdProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 10
                retry: 2
                interval: 10
                probePollingInterval: 5
              cmdProbe/inputs:
                command: "wscat -c ws://astral-turf-service:3000/ws && echo 'connected'"
                source:
                  image: 'alpine/wscat:latest'
                comparator:
                  type: 'string'
                  criteria: 'contains'
                  value: 'connected'
  annotationCheck: 'false'
  appinfo:
    appns: 'astral-turf'
    applabel: 'app.kubernetes.io/name=astral-turf'
    appkind: 'deployment'

---
apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: astral-turf-resource-chaos
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: chaos-engine
    experiment: resource-chaos
spec:
  engineState: 'active'
  auxiliaryAppInfo: ''
  chaosServiceAccount: litmus
  experiments:
    - name: pod-cpu-hog
      spec:
        components:
          env:
            - name: TOTAL_CHAOS_DURATION
              value: '180'
            - name: CPU_CORES
              value: '1'
            - name: PODS_AFFECTED_PERC
              value: '25'
            - name: TARGET_CONTAINER
              value: 'astral-turf'
          probe:
            - name: 'auto-scaling-response'
              type: 'k8sProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 10
                retry: 3
                interval: 15
                probePollingInterval: 5
              k8sProbe/inputs:
                group: 'apps'
                version: 'v1'
                resource: 'deployments'
                namespace: 'astral-turf'
                fieldSelector: 'metadata.name=astral-turf-app'
                operation: 'present'
            - name: 'performance-degradation-check'
              type: 'httpProbe'
              mode: 'Continuous'
              runProperties:
                probeTimeout: 20
                retry: 3
                interval: 10
                probePollingInterval: 3
              httpProbe/inputs:
                url: 'http://astral-turf-service:3000/api/performance/check'
                insecureSkipTLS: false
                method:
                  get:
                    criteria: <=
                    responseCode: '300'
    - name: pod-memory-hog
      spec:
        components:
          env:
            - name: TOTAL_CHAOS_DURATION
              value: '180'
            - name: MEMORY_CONSUMPTION
              value: '500'
            - name: PODS_AFFECTED_PERC
              value: '25'
            - name: TARGET_CONTAINER
              value: 'astral-turf'
  annotationCheck: 'false'
  appinfo:
    appns: 'astral-turf'
    applabel: 'app.kubernetes.io/name=astral-turf'
    appkind: 'deployment'

---
# ==================================================================
# SCHEDULED CHAOS EXPERIMENTS
# ==================================================================

apiVersion: batch/v1
kind: CronJob
metadata:
  name: weekly-chaos-tests
  namespace: chaos-engineering
  labels:
    app.kubernetes.io/name: chaos-scheduler
    app.kubernetes.io/component: scheduler
spec:
  schedule: '0 2 * * 1' # Every Monday at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: chaos-job
        spec:
          restartPolicy: OnFailure
          serviceAccountName: litmus
          containers:
            - name: chaos-orchestrator
              image: chaos-orchestrator:latest
              imagePullPolicy: Always
              env:
                - name: CHAOS_NAMESPACE
                  value: 'astral-turf'
                - name: SLACK_WEBHOOK
                  valueFrom:
                    secretKeyRef:
                      name: notification-secrets
                      key: slack-webhook
                - name: TEAMS_WEBHOOK
                  valueFrom:
                    secretKeyRef:
                      name: notification-secrets
                      key: teams-webhook
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              command:
                - /bin/sh
                - -c
                - |
                  echo "🧪 Starting Weekly Chaos Engineering Tests..."

                  # Pre-chaos health check
                  curl -f http://astral-turf-service.astral-turf:3000/health || {
                    echo "❌ Pre-chaos health check failed"
                    exit 1
                  }

                  # Notify teams about chaos testing
                  curl -X POST $SLACK_WEBHOOK -H 'Content-type: application/json' \
                    --data '{"text":"🧪 Weekly chaos engineering tests starting for Astral Turf"}'

                  # Execute chaos experiments in sequence
                  experiments=(
                    "astral-turf-pod-failure-chaos"
                    "astral-turf-network-chaos"
                    "astral-turf-resource-chaos"
                  )

                  for experiment in "${experiments[@]}"; do
                    echo "🔬 Running experiment: $experiment"
                    
                    # Apply chaos experiment
                    kubectl apply -f /experiments/$experiment.yaml -n astral-turf
                    
                    # Wait for experiment completion
                    kubectl wait --for=condition=ExperimentCompleted \
                      chaosengine/$experiment -n astral-turf --timeout=600s
                    
                    # Check experiment result
                    result=$(kubectl get chaosengine $experiment -n astral-turf \
                      -o jsonpath='{.status.engineStatus}')
                    
                    if [ "$result" != "completed" ]; then
                      echo "❌ Experiment $experiment failed"
                      curl -X POST $SLACK_WEBHOOK -H 'Content-type: application/json' \
                        --data "{\"text\":\"❌ Chaos experiment $experiment failed\"}"
                      exit 1
                    fi
                    
                    echo "✅ Experiment $experiment completed successfully"
                    
                    # Cleanup
                    kubectl delete chaosengine $experiment -n astral-turf
                    
                    # Wait between experiments
                    sleep 60
                  done

                  # Post-chaos health verification
                  sleep 120
                  curl -f http://astral-turf-service.astral-turf:3000/health || {
                    echo "❌ Post-chaos health check failed"
                    curl -X POST $SLACK_WEBHOOK -H 'Content-type: application/json' \
                      --data '{"text":"❌ Post-chaos health check failed for Astral Turf"}'
                    exit 1
                  }

                  # Success notification
                  curl -X POST $SLACK_WEBHOOK -H 'Content-type: application/json' \
                    --data '{"text":"✅ Weekly chaos engineering tests completed successfully for Astral Turf"}'

                  echo "🎉 All chaos experiments completed successfully!"
              volumeMounts:
                - name: experiments
                  mountPath: /experiments
                  readOnly: true
          volumes:
            - name: experiments
              configMap:
                name: chaos-experiments

---
# ==================================================================
# PERFORMANCE TESTING WITH K6
# ==================================================================

apiVersion: batch/v1
kind: CronJob
metadata:
  name: performance-load-tests
  namespace: chaos-engineering
  labels:
    app.kubernetes.io/name: performance-tester
    app.kubernetes.io/component: load-testing
spec:
  schedule: '0 3 * * *' # Daily at 3 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: performance-test-job
        spec:
          restartPolicy: OnFailure
          containers:
            - name: k6-load-test
              image: grafana/k6:latest
              imagePullPolicy: Always
              env:
                - name: TARGET_URL
                  value: 'http://astral-turf-service.astral-turf:3000'
                - name: PROMETHEUS_URL
                  value: 'http://prometheus-main.monitoring:9090'
              resources:
                requests:
                  cpu: 500m
                  memory: 512Mi
                limits:
                  cpu: 2000m
                  memory: 2Gi
              command:
                - /bin/sh
                - -c
                - |
                  cat << 'EOF' > /tmp/load-test.js
                  import http from 'k6/http';
                  import ws from 'k6/ws';
                  import { check, sleep } from 'k6';
                  import { Rate, Trend } from 'k6/metrics';

                  const errorRate = new Rate('errors');
                  const tacticalBoardLoadTime = new Trend('tactical_board_load_time');
                  const websocketConnectionTime = new Trend('websocket_connection_time');

                  export let options = {
                    stages: [
                      { duration: '2m', target: 100 },   // Ramp up
                      { duration: '5m', target: 500 },   // Normal load
                      { duration: '2m', target: 1000 },  // Peak load
                      { duration: '5m', target: 1000 },  // Sustained peak
                      { duration: '2m', target: 500 },   // Ramp down
                      { duration: '2m', target: 0 },     // Cool down
                    ],
                    thresholds: {
                      'http_req_duration': ['p(99)<100'],  // 99% under 100ms
                      'errors': ['rate<0.001'],            // Error rate under 0.1%
                      'tactical_board_load_time': ['p(95)<200'], // 95% under 200ms
                      'websocket_connection_time': ['p(99)<500'], // 99% under 500ms
                    },
                  };

                  export default function() {
                    // Test tactical board loading
                    let boardResponse = http.get(`${__ENV.TARGET_URL}/api/tactical-boards/load-test`);
                    check(boardResponse, {
                      'tactical board status is 200': (r) => r.status === 200,
                      'tactical board response time < 200ms': (r) => r.timings.duration < 200,
                    });
                    errorRate.add(boardResponse.status !== 200);
                    tacticalBoardLoadTime.add(boardResponse.timings.duration);
                    
                    // Test API endpoints
                    let apiResponse = http.get(`${__ENV.TARGET_URL}/api/health`);
                    check(apiResponse, {
                      'API health status is 200': (r) => r.status === 200,
                      'API response time < 50ms': (r) => r.timings.duration < 50,
                    });
                    errorRate.add(apiResponse.status !== 200);
                    
                    // Test WebSocket connections (every 10th user)
                    if (__ITER % 10 === 0) {
                      let wsStart = Date.now();
                      let wsResponse = ws.connect(`ws://${__ENV.TARGET_URL.replace('http://', '')}/ws`, function(socket) {
                        socket.on('open', function() {
                          socket.send(JSON.stringify({
                            type: 'test',
                            data: { message: 'load test connection' }
                          }));
                        });
                        
                        socket.on('message', function(data) {
                          socket.close();
                        });
                        
                        socket.setTimeout(function() {
                          socket.close();
                        }, 5000);
                      });
                      
                      let wsConnectionTime = Date.now() - wsStart;
                      websocketConnectionTime.add(wsConnectionTime);
                      
                      check(wsResponse, {
                        'WebSocket connection successful': (r) => r && r.status === 200,
                      });
                    }
                    
                    sleep(1);
                  }

                  export function handleSummary(data) {
                    return {
                      '/tmp/summary.json': JSON.stringify(data),
                      stdout: textSummary(data, { indent: ' ', enableColors: true }),
                    };
                  }
                  EOF

                  echo "🚀 Starting Performance Load Tests..."

                  # Run K6 load test
                  k6 run /tmp/load-test.js \
                    --out prometheus-remote-url=$PROMETHEUS_URL/api/v1/write \
                    --tag testid=astral-turf-load-test \
                    --tag environment=production

                  # Check if test passed
                  if [ $? -eq 0 ]; then
                    echo "✅ Performance load tests passed"
                  else
                    echo "❌ Performance load tests failed"
                    exit 1
                  fi

---
# ==================================================================
# RBAC FOR CHAOS ENGINEERING
# ==================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: litmus
  namespace: chaos-engineering
  labels:
    name: litmus
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: litmus
  labels:
    name: litmus
rules:
  - apiGroups: ['']
    resources: ['pods', 'pods/exec', 'pods/log', 'events', 'replicationcontrollers']
    verbs: ['create', 'list', 'get', 'patch', 'update', 'delete', 'deletecollection']
  - apiGroups: ['batch']
    resources: ['jobs']
    verbs: ['create', 'list', 'get', 'delete', 'deletecollection']
  - apiGroups: ['apps']
    resources: ['deployments', 'daemonsets', 'replicasets', 'statefulsets']
    verbs: ['list', 'get', 'patch', 'update', 'create', 'delete']
  - apiGroups: ['argoproj.io']
    resources: ['rollouts']
    verbs: ['list', 'get', 'patch', 'update']
  - apiGroups: ['litmuschaos.io']
    resources: ['chaosengines', 'chaosexperiments', 'chaosresults']
    verbs: ['create', 'list', 'get', 'patch', 'update', 'delete', 'deletecollection']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: litmus
  labels:
    name: litmus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: litmus
subjects:
  - kind: ServiceAccount
    name: litmus
    namespace: chaos-engineering

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: litmus-astral-turf
  labels:
    name: litmus-astral-turf
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: litmus
subjects:
  - kind: ServiceAccount
    name: litmus
    namespace: astral-turf
