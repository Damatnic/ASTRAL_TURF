# ==================================================================
# QUANTUM'S KUBERNETES CONFIGMAP
# Application configuration management
# ==================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: astral-turf-config
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: astral-turf
    app.kubernetes.io/component: config
data:
  # Application Configuration
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  
  # Feature Flags
  ENABLE_ANALYTICS: "true"
  ENABLE_AI_FEATURES: "true"
  ENABLE_COLLABORATIVE_BOARD: "true"
  ENABLE_REAL_TIME_UPDATES: "true"
  
  # Performance Settings
  CACHE_TTL: "3600"
  API_RATE_LIMIT: "1000"
  MAX_CONCURRENT_CONNECTIONS: "100"
  
  # Database Configuration
  DB_POOL_MIN: "2"
  DB_POOL_MAX: "10"
  DB_CONNECTION_TIMEOUT: "30000"
  DB_IDLE_TIMEOUT: "600000"
  
  # Redis Configuration
  REDIS_MAX_RETRIES: "3"
  REDIS_RETRY_DELAY: "100"
  REDIS_KEY_PREFIX: "astral:"
  
  # Security Settings
  CORS_ORIGINS: "https://astral-turf.com,https://app.astral-turf.com"
  CSRF_PROTECTION: "true"
  RATE_LIMIT_WINDOW: "900000"
  
  # Monitoring
  METRICS_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: loadbalancer
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;

        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Security
        server_tokens off;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private must-revalidate;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/javascript
            application/xml+rss
            application/json;

        upstream astral_backend {
            least_conn;
            server astral-turf-service:3000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        server {
            listen 80;
            server_name _;
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Redirect to HTTPS
            location / {
                return 301 https://$host$request_uri;
            }
        }

        server {
            listen 443 ssl http2;
            server_name _;
            
            # SSL Configuration
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            
            # API rate limiting
            limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
            
            location / {
                limit_req zone=api burst=20 nodelay;
                
                proxy_pass http://astral_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                
                # Timeouts
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            # Static assets caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                proxy_pass http://astral_backend;
            }
        }
    }