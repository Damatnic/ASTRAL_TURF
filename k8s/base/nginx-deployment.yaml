# ==================================================================
# QUANTUM'S NGINX LOAD BALANCER DEPLOYMENT
# High-performance load balancer with SSL termination
# ==================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: astral-turf
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: loadbalancer
    app.kubernetes.io/version: '1.25'
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/component: loadbalancer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/component: loadbalancer
        app.kubernetes.io/version: '1.25'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9113'
        prometheus.io/path: '/metrics'
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - nginx
                topologyKey: kubernetes.io/hostname

      containers:
        - name: nginx
          image: nginx:1.25-alpine
          imagePullPolicy: IfNotPresent

          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi

          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE

          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: tls-certs
              mountPath: /etc/nginx/ssl
              readOnly: true
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-logs
              mountPath: /var/log/nginx

        # Nginx Prometheus Exporter
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:0.11
          imagePullPolicy: IfNotPresent

          ports:
            - name: metrics
              containerPort: 9113
              protocol: TCP

          args:
            - -nginx.scrape-uri=http://localhost:80/nginx_status

          resources:
            requests:
              cpu: 50m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 64Mi

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
            defaultMode: 0644
        - name: tls-certs
          secret:
            secretName: tls-secret
            defaultMode: 0600
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: nginx-logs
          emptyDir: {}

      terminationGracePeriodSeconds: 30
