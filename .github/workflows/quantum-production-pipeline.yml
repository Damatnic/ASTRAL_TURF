# ==================================================================
# QUANTUM'S BULLETPROOF PRODUCTION PIPELINE
# Enterprise-grade CI/CD with 99.99% reliability
# ==================================================================

name: 🚀 Quantum Production Pipeline

on:
  push:
    branches: [main, master, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: astral-turf
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

# Workflow-level permissions
permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  # =====================================
  # SECURITY & QUALITY GATES
  # =====================================
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    name: 🎯 Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        analysis: [lint, format, type-check, complexity, dependencies]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run ${{ matrix.analysis }}
        run: |
          case ${{ matrix.analysis }} in
            lint)
              npm run lint
              ;;
            format)
              npm run format:check
              ;;
            type-check)
              npm run type-check
              ;;
            complexity)
              npx madge --circular --extensions ts,tsx src/
              npx eslint src/ --ext .ts,.tsx --format json > eslint-report.json || true
              ;;
            dependencies)
              npm audit --audit-level moderate
              npx depcheck
              ;;
          esac

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-${{ matrix.analysis }}
          path: |
            eslint-report.json
            audit-report.json
          retention-days: 7

  # =====================================
  # COMPREHENSIVE TESTING
  # =====================================
  test-matrix:
    name: 🧪 Test Suite (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [security-scan, code-quality]

    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, e2e, performance, accessibility]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npx prisma db push

      - name: Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-256-bit-key
          GEMINI_API_KEY: test-key
          NODE_ENV: test
        run: |
          case ${{ matrix.test-type }} in
            unit)
              npm run test:run -- --coverage --reporter=verbose
              ;;
            integration)
              npm run test:run -- src/__tests__/integration/ --coverage
              ;;
            e2e)
              npm run build
              npm start &
              sleep 30
              npm run e2e
              ;;
            performance)
              npm run build
              npm start &
              sleep 30
              npx lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json
              ;;
            accessibility)
              npm run build
              npm start &
              sleep 30
              npx @axe-core/cli http://localhost:3000 --save accessibility-report.json
              ;;
          esac

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.test-type }}
          path: |
            coverage/
            lighthouse-report.json
            accessibility-report.json
            test-results/
          retention-days: 7

  # =====================================
  # BUILD & CONTAINERIZATION
  # =====================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [test-matrix]

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  # =====================================
  # DEPLOYMENT STRATEGIES
  # =====================================
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name == 'pull_request'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          cd k8s/overlays/staging
          kustomize edit set image astral-turf=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-digest }}
          kubectl apply -k .
          kubectl rollout status deployment/astral-turf-app -n astral-turf-staging --timeout=300s

      - name: Run smoke tests
        run: |
          kubectl port-forward svc/astral-turf-service 8080:3000 -n astral-turf-staging &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ready || exit 1

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment
        run: |
          export KUBECONFIG=kubeconfig
          cd k8s/overlays/production

          # Update image in kustomization
          kustomize edit set image astral-turf=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-digest }}

          # Deploy to blue environment
          kubectl apply -k . --selector=deployment-slot=blue
          kubectl rollout status deployment/astral-turf-app-blue -n astral-turf --timeout=600s

          # Run health checks
          kubectl port-forward svc/astral-turf-service-blue 8080:3000 -n astral-turf &
          sleep 30

          # Validate deployment
          for i in {1..5}; do
            curl -f http://localhost:8080/health && break
            sleep 10
          done

          # Switch traffic to blue
          kubectl patch service astral-turf-service -n astral-turf -p '{"spec":{"selector":{"deployment-slot":"blue"}}}'

          # Wait and validate
          sleep 60

          # Cleanup green environment
          kubectl delete deployment astral-turf-app-green -n astral-turf --ignore-not-found=true

      - name: Post-deployment validation
        run: |
          export KUBECONFIG=kubeconfig

          # Check all pods are running
          kubectl get pods -n astral-turf -l app.kubernetes.io/name=astral-turf

          # Validate external endpoint
          curl -f https://app.astral-turf.com/health || exit 1

          # Run performance test
          curl -f https://app.astral-turf.com/api/metrics || exit 1

  # =====================================
  # POST-DEPLOYMENT MONITORING
  # =====================================
  monitor-deployment:
    name: 📊 Monitor Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Wait for stabilization
        run: sleep 300

      - name: Check SLI metrics
        run: |
          # Availability check
          for i in {1..10}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://app.astral-turf.com/health)
            if [ "$response" != "200" ]; then
              echo "Health check failed with code: $response"
              exit 1
            fi
            sleep 30
          done

          # Performance check
          response_time=$(curl -s -w "%{time_total}" -o /dev/null https://app.astral-turf.com/)
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "Response time too high: $response_time seconds"
            exit 1
          fi

      - name: Notify success
        if: success()
        run: |
          echo "✅ Deployment successful and validated!"
          echo "🌟 SLI metrics within acceptable range"
          echo "🚀 Production environment stable"

  # =====================================
  # ROLLBACK MECHANISM
  # =====================================
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production, monitor-deployment]
    environment: production

    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout undo deployment/astral-turf-app -n astral-turf
          kubectl rollout status deployment/astral-turf-app -n astral-turf --timeout=300s

      - name: Validate rollback
        run: |
          sleep 60
          curl -f https://app.astral-turf.com/health || exit 1
          echo "🔄 Rollback completed successfully"
